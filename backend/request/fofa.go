package request

import (
	"crypto/tls"
	"doki-byte/FreeProxy/backend/config"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type FofaAutoGenerated struct {
	Mode    string     `json:"mode"`
	Error   bool       `json:"error"`
	Query   string     `json:"query"`
	Page    int        `json:"page"`
	Size    int        `json:"size"`
	Results [][]string `json:"results"`
}

func fofa_api(keyword string, email string, key string, page int, size int) string {
	input := []byte(keyword)
	encodeString := base64.StdEncoding.EncodeToString(input)
	api_request := fmt.Sprintf("https://fofa.info/api/v1/search/all?email=%s&page=%d&size=%d&key=%s&qbase64=%s&fields=ip,host,title,port,protocol", strings.Trim(email, " "), page, size, strings.Trim(key, " "), encodeString)
	return api_request
}

func fofahttp(url string, timeout string) *FofaAutoGenerated {
	var itime, err = strconv.Atoi(timeout)
	if err != nil {
		log.Println("fofa超时参数错误: ", err)
	}
	transport := &http.Transport{TLSClientConfig: &tls.Config{InsecureSkipVerify: true}}
	client := &http.Client{
		Timeout:   time.Duration(itime) * time.Second,
		Transport: transport,
	}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("Accept", "*/*;q=0.8")
	req.Header.Set("Connection", "close")
	req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36")
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	result, _ := io.ReadAll(resp.Body)
	res := &FofaAutoGenerated{}
	json.Unmarshal(result, &res)
	return res
}

func Fafaall(keyword string) (urls []string) {
	fofa := config.GetConfig()
	url := fofa_api(keyword, fofa.Email, fofa.FofaKey, 1, 100)
	res := fofahttp(url, fofa.Timeout)
	pagelength := res.Size/1000 + 1
	for _, value := range res.Results {
		urls = append(urls, value[1])
	}
	Maxpage, _ := strconv.Atoi(fofa.Maxpage)
	if pagelength > 1 {
		for i := 2; i <= pagelength && i <= Maxpage; i++ {
			fmt.Println("正在请求第" + strconv.Itoa(i) + "页数据")
			url = fofa_api(keyword, fofa.Email, fofa.FofaKey, i, 100)
			res = fofahttp(url, fofa.Timeout)
			if len(res.Results) > 0 {
				for _, value := range res.Results {
					urls = append(urls, value[1])
				}
			}
		}
	}

	return urls
}

type FofaConfig struct {
}

func (fp *FofaConfig) Name() string {
	return "Hunter"
}

func (fp *FofaConfig) Fetch() ([]string, error) {
	fofa := config.GetConfig()

	var fofakeys string

	if fofa.FofaKey != "" && fofa.Email != "" {
		switch fofa.Country {
		case "0":
			fofakeys = "protocol==\"socks5\"&&protocol.banner=\"Method: 0x00 (No authentication)\""
		case "1":
			fofakeys = "protocol==\"socks5\"&&protocol.banner=\"Method: 0x00 (No authentication)\" && ip.country=\"CN\""
		case "2":
			fofakeys = "protocol==\"socks5\"&&protocol.banner=\"Method: 0x00 (No authentication)\" && ip.country!=\"CN\""
		}
		urls := Fafaall(fofakeys)
		return urls, nil
	} else {
		return nil, nil
	}
}
