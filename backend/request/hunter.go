package request

import (
	"crypto/tls"
	"doki-byte/FreeProxy/backend/config"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type HunterAutoGenerated struct {
	Code int `json:"code"`
	Data struct {
		AccountType string `json:"account_type"`
		Total       int    `json:"total"`
		Time        int    `json:"time"`
		Arr         []struct {
			IsRisk         string      `json:"is_risk"`
			Url            string      `json:"url"`
			Ip             string      `json:"ip"`
			Port           int         `json:"port"`
			WebTitle       string      `json:"web_title"`
			Domain         string      `json:"domain"`
			IsRiskProtocol string      `json:"is_risk_protocol"`
			Protocol       string      `json:"protocol"`
			BaseProtocol   string      `json:"base_protocol"`
			StatusCode     int         `json:"status_code"`
			Component      interface{} `json:"component"`
			Os             string      `json:"os"`
			Company        string      `json:"company"`
			Number         string      `json:"number"`
			Country        string      `json:"country"`
			Province       string      `json:"province"`
			City           string      `json:"city"`
			UpdatedAt      string      `json:"updated_at"`
			IsWeb          string      `json:"is_web"`
			AsOrg          string      `json:"as_org"`
			Isp            string      `json:"isp"`
			Banner         string      `json:"banner"`
		} `json:"arr"`
		ConsumeQuota string `json:"consume_quota"`
		RestQuota    string `json:"rest_quota"`
		SyntaxPrompt string `json:"syntax_prompt"`
	} `json:"data"`
	Message string `json:"message"`
}

func hunter_api(keyword string, key string, page int, size int) string {
	input := []byte(keyword)
	encodeString := base64.StdEncoding.EncodeToString(input)
	nowTime := time.Now()
	endtime := nowTime.Format("2006-01-02")
	starttime := nowTime.AddDate(0, -1, 0).Format("2006-01-02")
	api_request := fmt.Sprintf("https://hunter.qianxin.com/openApi/search?api-key=%s&search=%s&page=%s&page_size=%s&is_web=3&port_filter=false&start_time=%s&end_time=%s", strings.Trim(key, " "), encodeString, strconv.Itoa(page), strconv.Itoa(size), starttime, endtime)
	return api_request
}

func hunterhttp(url string, timeout string) *HunterAutoGenerated {
	var itime, err = strconv.Atoi(timeout)
	if err != nil {
		log.Println("hunter超时参数错误: ", err)
	}
	transport := &http.Transport{TLSClientConfig: &tls.Config{InsecureSkipVerify: true}}
	client := &http.Client{
		Timeout:   time.Duration(itime) * time.Second,
		Transport: transport,
	}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("Accept", "*/*;q=0.8")
	req.Header.Set("Connection", "close")
	req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36")
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	result, _ := io.ReadAll(resp.Body)
	res := &HunterAutoGenerated{}
	json.Unmarshal(result, &res)
	return res
}

func Hunterall(keyword string) (urls []string) {
	hunter := config.GetConfig()
	url := hunter_api(keyword, hunter.HunterKey, 1, 10)
	res := hunterhttp(url, hunter.Timeout)
	pagelength := res.Data.Total/10 + 1
	for _, value := range res.Data.Arr {
		urls = append(urls, value.Ip+":"+strconv.Itoa(value.Port))
	}
	Maxpage, _ := strconv.Atoi(hunter.Maxpage)
	if pagelength > 1 {
		for i := 2; i <= pagelength && i <= Maxpage; i++ {
			fmt.Println("正在请求第" + strconv.Itoa(i) + "页数据")
			url = hunter_api(keyword, hunter.HunterKey, i, 10)
			res = hunterhttp(url, hunter.Timeout)
			if len(res.Data.Arr) > 0 {
				for _, value := range res.Data.Arr {
					urls = append(urls, value.Ip+":"+strconv.Itoa(value.Port))
				}
			}
		}
	}

	return urls
}

type HunterConfig struct {
}

func (fp *HunterConfig) Name() string {
	return "Hunter"
}

func (fp *HunterConfig) Fetch() ([]string, error) {
	hunter := config.GetConfig()

	var hunterkeys string

	if hunter.HunterKey != "" {
		switch hunter.Country {
		case "0":
			hunterkeys = "protocol==\"socks5\"&&protocol.banner=\"Method: 0x00 (No authentication)\""
		case "1":
			hunterkeys = "protocol==\"socks5\"&&protocol.banner=\"Method: 0x00 (No authentication)\" && ip.country=\"CN\""
		case "2":
			hunterkeys = "protocol==\"socks5\"&&protocol.banner=\"Method: 0x00 (No authentication)\" && ip.country!=\"CN\""
		}
		urls := Hunterall(hunterkeys)
		return urls, nil
	} else {
		return nil, nil
	}
}
